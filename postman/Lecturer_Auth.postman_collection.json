{
	"info": {
		"_postman_id": "7e1fc1cc-30ed-420d-b8b2-ebb685ac33f9",
		"name": "Lecturer_Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:3000/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					],
					"query": [
						{
							"key": "name",
							"value": "test",
							"disabled": true
						},
						{
							"key": "role",
							"value": "Lecturer",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users/profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"test role\", function () {\r",
							"    pm.expect(jsonData.role).to.eql(\"Lecturer\");\r",
							"});\r",
							"pm.collectionVariables.set(\"u_id\", jsonData.id);\r",
							"pm.collectionVariables.set(\"current_name\", jsonData.name);\r",
							"pm.collectionVariables.set(\"current_role\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users/assignment/0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"// Expecting undefined because it is not possible yet to submit assignments\r",
							"// -> result is always empty\r",
							"pm.test(\"test role\", function () {\r",
							"    pm.expect(jsonData.role).to.eql(undefined);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/assignment/5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"assignment",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"const requestData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"if (pm.response.code == 201) {\r",
							"    pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"    pm.test(\"name\", function () {\r",
							"        pm.expect(responseData.courseName).to.eql(requestData.name);\r",
							"    });\r",
							"    pm.collectionVariables.set(\"c_id\", responseData.courseId);\r",
							"    pm.collectionVariables.set(\"course_name\", responseData.courseName);\r",
							"} else {\r",
							"    pm.test(\"Status code is 409\", function () {\r",
							"        pm.response.to.have.status(409);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Philip Test39\",\r\n    \"password\": \"Test1234\",\r\n    \"description\": \"another test\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Duplicate Entry\", function () {\r",
							"    pm.expect(responseData.error.code).to.eql(\"ER_DUP_ENTRY\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{c_id}},\r\n    \"password\": \"Test1234\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"const requestData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"if (pm.response.code == 201) {\r",
							"    pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"    pm.test(\"name\", function () {\r",
							"        pm.expect(responseData.assignmentName).to.eql(requestData.name);\r",
							"    });\r",
							"    pm.collectionVariables.set(\"a_id\", responseData.assignmentId);\r",
							"    pm.collectionVariables.set(\"assignment_name\", responseData.assignmentName);\r",
							"} else {\r",
							"    pm.test(\"Status code is 409\", function () {\r",
							"        pm.response.to.have.status(409);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"example{{counter}}\",\r\n    \"repository\": \"https://www.example{{counter}}.com\",\r\n    \"description\": \"example{{counter}}\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/assignments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsCourse = responseData.filter(data => data.id == pm.collectionVariables.get(\"c_id\")).length > 0;\r",
							"    pm.test(\"Contains created course!\", function () {\r",
							"        pm.expect(containsCourse).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"pm.test(\"Retrieve created course!\", function () {\r",
							"    pm.expect(responseData[0].name).to.eql(pm.collectionVariables.get(\"course_name\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"const containsCreator = responseData.filter(data => data.id == pm.collectionVariables.get(\"u_id\")).length > 0;\r",
							"pm.test(\"Course contains creator!\", function () {\r",
							"    pm.expect(containsCreator).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id",
						"users"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments/assignment/:aId/course/:cId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/assignments/assignment/:aId/course/:cId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments",
						"assignment",
						":aId",
						"course",
						":cId"
					],
					"variable": [
						{
							"key": "aId",
							"value": "{{a_id}}"
						},
						{
							"key": "cId",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id/assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsAssignment = responseData.filter(data => data.id == pm.collectionVariables.get(\"a_id\")).length > 0;\r",
							"    pm.test(\"Contains created assignment!\", function () {\r",
							"        pm.expect(containsAssignment).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id/assignments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id",
						"assignments"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id/assignments/visible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData && Array.isArray(responseData)) {\r",
							"    const containsAssignment = responseData.filter(data => data.id == pm.collectionVariables.get(\"a_id\")).length > 0;\r",
							"    pm.test(\"Contains created assignment!\", function () {\r",
							"        pm.expect(containsAssignment).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id/assignments/visible",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id",
						"assignments",
						"visible"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments/assignment/:aId/course/:cId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"visibleFrom\": \"2022-10-18T08:30:00.000Z\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/assignments/assignment/:aId/course/:cId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments",
						"assignment",
						":aId",
						"course",
						":cId"
					],
					"variable": [
						{
							"key": "aId",
							"value": "{{a_id}}"
						},
						{
							"key": "cId",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id/assignments/visible Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData && Array.isArray(responseData)) {\r",
							"    const containsAssignment = responseData.filter(data => data.id == pm.collectionVariables.get(\"a_id\")).length > 0;\r",
							"    pm.test(\"Does not contain created assignment anymore!\", function () {\r",
							"        pm.expect(containsAssignment).to.eql(false);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id/assignments/visible",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id",
						"assignments",
						"visible"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:id/assignments/no-relation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData && Array.isArray(responseData)) {\r",
							"    const containsAssignment = responseData.filter(data => data.id == pm.collectionVariables.get(\"a_id\")).length > 0;\r",
							"    pm.test(\"Assignment has a relation with course and is only invisible!\", function () {\r",
							"        pm.expect(containsAssignment).to.eql(false);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:id/assignments/no-relation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":id",
						"assignments",
						"no-relation"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/myCourses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/myCourses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"myCourses"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/name/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"coursetest+{{counter}}\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/name/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"name",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/description/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"test new\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/description/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"description",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/hidden/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"hidden\": false\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/hidden/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"hidden",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/starred/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"starred\": false\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/starred/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"starred",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/visited/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/visited/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"visited",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/role/:cId/:uId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Lecturer is not allowed to update his own role\", function () {\r",
							"    pm.expect(responseData.error).to.eql(\"Unable to update user's own course role!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"CourseAdmin\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/role/:cId/:uId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"role",
						":cId",
						":uId"
					],
					"variable": [
						{
							"key": "cId",
							"value": "{{c_id}}"
						},
						{
							"key": "uId",
							"value": "{{u_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/accessed/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"person_access\", (jsonData[0])[\"COUNT(*)\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/accessed/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"accessed",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/accessed/total/:id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"total_access\", (jsonData[0])[\"COUNT(*)\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/accessed/total/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"accessed",
						"total",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/accessed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{c_id}}\r\n}"
				},
				"url": {
					"raw": "http://localhost:3000/courses/accessed",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"accessed"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/accessed/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.test(\"Number of accessed persons stays the same after 2 requests!\", function () {\r",
							"    pm.expect((responseData[0])[\"COUNT(*)\"]).to.eql(pm.collectionVariables.get(\"person_access\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/accessed/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"accessed",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/accessed/total/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.test(\"Number of total access increased by 1!\", function () {\r",
							"    pm.expect((responseData[0])[\"COUNT(*)\"]).to.eql(pm.collectionVariables.get(\"total_access\")+1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/accessed/total/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"accessed",
						"total",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{c_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsAssignment = responseData.filter(data => data.id == pm.collectionVariables.get(\"a_id\")).length > 0;\r",
							"    pm.test(\"Contains created assignment!\", function () {\r",
							"        pm.expect(containsAssignment).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/assignments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments/assignment/:id/courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsCourse = responseData.filter(data => data.id == pm.collectionVariables.get(\"c_id\")).length > 0;\r",
							"    pm.test(\"Contains created course!\", function () {\r",
							"        pm.expect(containsCourse).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/assignments/assignment/:id/courses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments",
						"assignment",
						":id",
						"courses"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{a_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments/assignment/:id/courses/no-relation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsCourse = responseData.filter(data => data.id == pm.collectionVariables.get(\"c_id\")).length > 0;\r",
							"    pm.test(\"Course has relation with assignment and therefore is not present in this array!\", function () {\r",
							"        pm.expect(containsCourse).to.eql(false);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/assignments/assignment/:id/courses/no-relation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments",
						"assignment",
						":id",
						"courses",
						"no-relation"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{a_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/courses/course/:cId/assignment/:aId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/courses/course/:cId/assignment/:aId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"courses",
						"course",
						":cId",
						"assignment",
						":aId"
					],
					"variable": [
						{
							"key": "cId",
							"value": "{{c_id}}"
						},
						{
							"key": "aId",
							"value": "{{a_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/assignments/assignment/:id/courses/no-relation Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"if (responseData) {\r",
							"    const containsCourse = responseData.filter(data => data.id == pm.collectionVariables.get(\"c_id\")).length > 0;\r",
							"    pm.test(\"After deletion, course should not contain assignment anymore! -> Therefore no-relation is true\", function () {\r",
							"        pm.expect(containsCourse).to.eql(true);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/assignments/assignment/:id/courses/no-relation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"assignments",
						"assignment",
						":id",
						"courses",
						"no-relation"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{a_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "<Dein Access Token>",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"disabled": true
		},
		{
			"key": "c_id",
			"value": 104
		},
		{
			"key": "course_name",
			"value": "Philip Test39"
		},
		{
			"key": "u_id",
			"value": 33
		},
		{
			"key": "current_name",
			"value": "Philip Aguilar Bremer"
		},
		{
			"key": "current_role",
			"value": "Lecturer"
		},
		{
			"key": "a_id",
			"value": 17
		},
		{
			"key": "assignment_name",
			"value": "example10"
		},
		{
			"key": "total_access",
			"value": 0
		},
		{
			"key": "person_access",
			"value": 1
		},
		{
			"key": "counter",
			"value": "15"
		}
	]
}